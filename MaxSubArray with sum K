#We used prefix sum to store sum till that number and then traversed from 0 till that number such that every time we remove the traversed number and find the sum.
#this was giving TLE.


class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
      int dp[nums.size()];
        int count=0;
        for(int i=0;i<nums.size();i++)
        {
            if(i==0)
                dp[i]=nums[i];
            else
            dp[i]=dp[i-1]+nums[i];
        }
        for(int i=0;i<nums.size();i++)
        {
           int j=0;
            if(dp[i]==k)
                count++;
            while(j<i)
            {
                if(dp[i]-dp[j]==k)
                    count++;
                j++;
            }
        }
         return count;   
    }
};


#there can be a better approach.
Why you need to traverse again and again ? instead use a map and store prefix without that number in a map.
