https://leetcode.com/problems/add-two-numbers-ii/

This is different addtion of linked list.
most significant digit is the head here
So we have a problem ..that in case of carry we need to add at head.
1->2->3->4
   5->6->7
   
1->8->0->1

Two approach came in mind
first  -----    reverse the both linked list add and reverse again.


Second -- using stack



class Solution {
public:
    
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        stack <int> s1,s2;
        // if(!l2) return l1;
        // if(!l1) return l2;
        while(l1)
        {
            s1.push(l1->val);
            l1=l1->next;
        }
        while(l2)
            
        {
            s2.push(l2->val);
            l2=l2->next;
        }
        ListNode* list=new ListNode(0);
     
        int carry=0;
        while(!s1.empty() || !s2.empty() || carry>0)
        {
         int sum=carry;
         if(!s1.empty()) {
             sum+=s1.top();
             s1.pop();
         }
             if(!s2.empty()) {
             sum+=s2.top();
             s2.pop();
         }
            carry=sum/10;
            sum=sum%10;
            
            list->val=sum;
            ListNode* temp=new ListNode(0);
            temp->next=list;
            list=temp;
           
            
       }
            
            
        return list->next;    
            
            
            
            
    }
};
