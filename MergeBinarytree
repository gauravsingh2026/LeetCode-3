why this solution is worong

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
   
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
       int data;
        if(root1==NULL && root2==NULL)
            return root2;
        if(root1 && root2)
             data=root1->val+root2->val;
        else
        {
            if(root1)
                 data=root1->val;
            else
                 data=root2->val;
            
        }
        TreeNode* root=new TreeNode();
        root->left=mergeTrees(root1->left,root2->left);
        root->right=mergeTrees(root1->right,root2->right);
        return root;
    }
};

Look at line 32 and line 25,even if root1 is null we are accessing root1;


A better solution is
 TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
       
      if(root1&&root2)
     {
         TreeNode* root=new TreeNode(root1->val+root2->val);
         root->left=mergeTrees(root1->left,root2->left);
          root->right=mergeTrees(root1->right,root2->right);
         return root;
     }
        return root1?root1:root2;
};

